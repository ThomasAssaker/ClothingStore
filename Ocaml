type category = Men | Women | Kids
type subcategory = Pants | Shirts | Shoes | BathingSuits | Accessories
type item = {
  color : string;
  (* Add other item properties as needed *)
}
type clothing_store = {
  mutable categories : (category * subcategory * item list) list;
}
let create_item color = { color }
let create_category_store () = { categories = [] }
let create category subcategory color store =
  let item = create_item color in
  store.categories <- (category, subcategory, [item]) :: store.categories
let read store = store.categories
let update category subcategory color new_color store =
  let update_item item =
    if item.color = color then { item with color = new_color }
    else item
  in
  let update_subcategory (cat, sub, items) =
    if cat = category && sub = subcategory then
      (cat, sub, List.map update_item items)
    else (cat, sub, items)
  in
  store.categories <- List.map update_subcategory store.categories
let delete category subcategory color store =
  let delete_item item = item.color <> color in
  let delete_subcategory (cat, sub, items) =
    if cat = category && sub = subcategory then
      (cat, sub, List.filter delete_item items)
    else (cat, sub, items)
  in
  store.categories <- List.filter (fun (_, _, items) -> items <> []) (List.map delete_subcategory store.categories)
